create database project2;
use project2;

set sql_safe_updates = 0;

# Table 1 -Customers
create table Customers(
customer_id int primary key auto_increment,
first_name varchar(20),
last_name varchar(20),
phone_number varchar(13),
email varchar(50)
);

#Table 2- Menu-items
create table Menu_items(
item_id int primary key auto_increment,
item_name varchar(20),
description text,
price decimal(10,2),
category varchar(20)
);

#Table 3- Orders
create table orders(
order_id int primary key auto_increment,
customer_id int,
item_id int,
quantity int,
order_date date,
total_price decimal(10,2),
foreign key(customer_id) references Customers(customer_id),
foreign key(item_id) references menu_items(item_id)
);

# Insert values into tables
INSERT INTO customers (first_name, last_name, phone_number, email)
VALUES 
('Alice', 'Johnson', '+919934567890', 'alice.johnson@example.com'),
('Bob', 'Smith', '+919876543210', 'bob.smith@example.com'),
('Charlie', 'Brown', '+917755555555', 'charlie.brown@example.com');

INSERT INTO menu_items (item_name, description, price, category)
VALUES 
('Margherita Pizza', 'Classic pizza with tomato sauce and mozzarella', 190, 'Main Course'),
('Caesar Salad', 'Fresh romaine lettuce with croutons and Caesar dressing', 70, 'Appetizer'),
('Chocolate Cake', 'Rich chocolate cake with a creamy frosting', 120, 'Dessert');

INSERT INTO orders (customer_id, item_id, quantity, order_date, total_price)
VALUES 
(1, 1, 2, '2023-10-01', 21.98), -- Alice ordered 2 Margherita Pizzas
(2, 2, 1, '2023-10-02', 7.99),  -- Bob ordered 1 Caesar Salad
(3, 3, 3, '2023-10-03', 17.97); -- Charlie ordered 3 Chocolate Cakes

select * from customers;
select * from orders;
select * from menu_items;


-- 1. Retrieve all orders with customer and item details
select first_name,last_name,item_name,quantity,quantity*price as total,order_date from orders
join customers on orders.customer_id = customers.customer_id
join menu_items on orders.item_id = menu_items.item_id;


-- 2 Find the all order made by Alice Johnson
select first_name,last_name,item_name,quantity,quantity*price as total_price,order_date from orders
join customers on orders.customer_id = customers.customer_id
join menu_items on orders.item_id = menu_items.item_id
where first_name = 'Alice';


-- 3.Calculate the total revenue generated by the restaurant:alter
select sum(quantity*price) from orders
join menu_items on orders.item_id = menu_items.item_id;

-- 4.Find the most popular menu item (by quantity ordered):
select item_name,sum(quantity) as Total_orders from orders
join menu_items on orders.item_id = menu_items.item_id
group by item_name 
order by Total_orders desc limit 1;

-- 5.- Update the price of a menu item ( increase price by 20):
update menu_items set price = price+15;
select * from menu_items;

-- 6.Find the total number of orders placed by each customer:
select first_name,last_name,sum(quantity),sum(quantity*price) from orders
join customers on orders.customer_id = customers.customer_id
join menu_items on orders.item_id = menu_items.item_id
group by first_name,last_name;            

-- 7.List of all items that have been never ordered
select item_name from menu_items 
join orders on menu_items.item_id = orders.order_id
where order_id is null;

-- 8.Find the customer who spent the most money
select first_name,last_name,sum(quantity*price) as Total_spend from orders
join customers on orders.customer_id = customers.customer_id
join menu_items on orders.item_id = menu_items.item_id
group by first_name,last_name
order by Total_spend desc;

-- 9.List all orders placed in the last 7 days
select item_name,order_date from orders
join customers on orders.customer_id = customers.customer_id
join menu_items on orders.item_id = menu_items.item_id
where order_date >= date_sub(curdate(), interval 7 day);

-- 10. Total revenue generated by items
SELECT menu_items.item_name, SUM(menu_items.price * orders.quantity) AS TotalRevenue
FROM orders
JOIN menu_items ON orders.item_iD = menu_items.item_iD
GROUP BY menu_items.item_name;

